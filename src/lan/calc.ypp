%{

#include <stdio.h>
#include <stdlib.h>
#include <iostream>

extern int yylex();
extern int yyparse();
extern FILE* yyin;

%}

%code requires {
#include "OslMaterial.hpp"
Statement* generate_statement();
void yyerror(Statement** stat, const char* s);
}

%parse-param {Statement** soutput}

%union {
	float fval;
	char* sval;
	Exp* eval;
	Statement* staval;
}


// Token definitions
%token<fval> T_FLOAT
%token<fval> T_NUMBER
%token T_PLUS
%token T_COLON
%token T_SEMICOLON
%token T_EQUAL
%token T_PAR_LEFT
%token T_PAR_RIGHT
%token T_BRACE_LEFT
%token T_BRACE_RIGHT

%token T_LOWERTHAN

%token<sval> T_IDENTIFIER

%token T_FLOAT_KEYWORD
%token T_COLOR_KEYWORD
%token T_INT_KEYWORD
%token T_SHADER_KEYWORD
%token T_RGB_KEYWORD
%token T_HSV_KEYWORD
%token T_IF_KEYWORD
%token T_ELSE_KEYWORD

// Associativity
%left T_PLUS

// Types
%type<staval> S
%type<staval> LS
%type<staval> start
%type<staval> statement_block
%type<staval> if_statement

%type<eval> exp
%type<eval> color_declaration
%type<eval> v


%start start

%%

start:
	statement_block {$$ = $1; *soutput = $1;}
;

statement_block:
	T_BRACE_LEFT LS T_BRACE_RIGHT {$$ = $2;}
;

if_statement:
	  T_IF_KEYWORD T_PAR_LEFT exp T_PAR_RIGHT statement_block {$$ = new Statement(Statement::IF, $3, $5, new Statement(Statement::SKIP));}
	| T_IF_KEYWORD T_PAR_LEFT exp T_PAR_RIGHT statement_block T_ELSE_KEYWORD statement_block {$$ = new Statement(Statement::IF, $3, $5, $7);}
;

color_declaration:
	  T_COLOR_KEYWORD T_PAR_LEFT exp T_COLON exp T_COLON exp T_PAR_RIGHT {$$ = new Exp(Exp::VEC, $3, $5, $7);}
;

v:
	  color_declaration {$$ = $1;}
;

exp:
	  T_NUMBER {$$ = new Exp(Exp::NUM, $1);}
	| T_IDENTIFIER {$$ = new Exp(Exp::VAR, $1);}
	| v {$$ = $1;} 
	| exp T_PLUS exp {$$ = new Exp(Exp::SUM, $1, $3);}

LS:
	  LS S {$$ = new Statement(Statement::SEQ, $1, $2);}
	| S T_SEMICOLON {$$ = $1;}
;

S:
      T_SEMICOLON {$$ = new Statement(Statement::SKIP);}
	| T_FLOAT_KEYWORD T_IDENTIFIER T_EQUAL exp {$$ = new Statement(Statement::ASS, $2, $4);}
	| T_COLOR_KEYWORD T_IDENTIFIER T_EQUAL exp {$$ = new Statement(Statement::ASS, $2, $4);}
	| if_statement {$$ = $1;}
;





%%

#include "Vector.h"

Statement* generate_statement(){

	std::cout << "parsing" << std::endl;

	FILE* ptr;
	char ch;
	 
	// Opening file in reading mode
	ptr = fopen("test.osl", "r");
	 
	if (NULL == ptr) {
		printf("file can't be opened \n");
	}
	 
	//yyin = stdin;
	yyin = ptr;

	Statement* start;

	do {
		yyparse(&start);
	} while(!feof(yyin));
	
	return start;
}

void yyerror(Statement** stat, const char* s) {
	fprintf(stderr, "Parse error: %s\n", s);
	exit(1);
}